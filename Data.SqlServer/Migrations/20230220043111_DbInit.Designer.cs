// <auto-generated />
using System;
using Data.SqlServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.SqlServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230220043111_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.SqlServer.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.SqlServer.Data.CacViTri", b =>
                {
                    b.Property<int>("ViTriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vitri_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViTriId"), 1L, 1);

                    b.Property<string>("ViTriName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vitri_name");

                    b.HasKey("ViTriId");

                    b.ToTable("CacViTri");
                });

            modelBuilder.Entity("Data.SqlServer.Data.LoaiTin", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date")
                        .HasColumnOrder(103);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description")
                        .HasColumnOrder(102);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(105);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasColumnOrder(100);

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasColumnOrder(101);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LoaiTin");
                });

            modelBuilder.Entity("Data.SqlServer.Data.MenuMain", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("menu_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date")
                        .HasColumnOrder(103);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description")
                        .HasColumnOrder(102);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("menu_name");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("menu_url");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(105);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasColumnOrder(100);

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasColumnOrder(101);

                    b.HasKey("MenuId");

                    b.ToTable("MenuMain");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9258),
                            Description = "",
                            MenuName = "Trang chủ",
                            MenuUrl = "/#",
                            Order = 0,
                            ParentId = 0,
                            Status = true
                        },
                        new
                        {
                            MenuId = 2,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9260),
                            Description = "",
                            MenuName = "Giới thiệu",
                            MenuUrl = "/gioi-thieu",
                            Order = 0,
                            ParentId = 0,
                            Status = true
                        },
                        new
                        {
                            MenuId = 3,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9262),
                            Description = "",
                            MenuName = "Trang 3",
                            MenuUrl = "/trang3",
                            Order = 0,
                            ParentId = 0,
                            Status = true
                        },
                        new
                        {
                            MenuId = 4,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9263),
                            Description = "",
                            MenuName = "Trang 34",
                            MenuUrl = "/trang4",
                            Order = 0,
                            ParentId = 3,
                            Status = true
                        },
                        new
                        {
                            MenuId = 5,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9264),
                            Description = "",
                            MenuName = "Trang 35",
                            MenuUrl = "/trang5",
                            Order = 0,
                            ParentId = 3,
                            Status = true
                        });
                });

            modelBuilder.Entity("Data.SqlServer.Data.QuangCao", b =>
                {
                    b.Property<int>("QuangCaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quangcao_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuangCaoId"), 1L, 1);

                    b.Property<string>("QuangCaoImageUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("qunagcao_image");

                    b.Property<string>("QuangCaoName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("quangcao_name");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<int>("ViTriId")
                        .HasColumnType("int")
                        .HasColumnName("vitri_id");

                    b.HasKey("QuangCaoId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ViTriId");

                    b.ToTable("QuangCao");
                });

            modelBuilder.Entity("Data.SqlServer.Data.SuKien", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date")
                        .HasColumnOrder(103);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description")
                        .HasColumnOrder(102);

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("event_date");

                    b.Property<string>("EventImageUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("event_image");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("event_title");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(105);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasColumnOrder(100);

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasColumnOrder(101);

                    b.HasKey("EventId");

                    b.ToTable("SuKien");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9102),
                            Description = "",
                            EventDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9101),
                            EventImageUrl = "a.png",
                            EventName = "Sự kiện 11",
                            Order = 0,
                            Status = true
                        },
                        new
                        {
                            EventId = 2,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9104),
                            Description = "",
                            EventDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9103),
                            EventImageUrl = "a.png",
                            EventName = "Sự kiện 12",
                            Order = 0,
                            Status = true
                        },
                        new
                        {
                            EventId = 3,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9106),
                            Description = "",
                            EventDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9106),
                            EventImageUrl = "a.png",
                            EventName = "Sự kiện 13",
                            Order = 0,
                            Status = true
                        },
                        new
                        {
                            EventId = 4,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9108),
                            Description = "",
                            EventDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9108),
                            EventImageUrl = "a.png",
                            EventName = "Sự kiện 14",
                            Order = 0,
                            Status = true
                        },
                        new
                        {
                            EventId = 5,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9111),
                            Description = "",
                            EventDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9110),
                            EventImageUrl = "a.png",
                            EventName = "Sự kiện 15",
                            Order = 0,
                            Status = true
                        },
                        new
                        {
                            EventId = 6,
                            CreatedDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9113),
                            Description = "",
                            EventDate = new DateTime(2023, 2, 20, 11, 31, 11, 444, DateTimeKind.Local).AddTicks(9112),
                            EventImageUrl = "a.png",
                            EventName = "Sự kiện 16",
                            Order = 0,
                            Status = true
                        });
                });

            modelBuilder.Entity("Data.SqlServer.Data.TheLoai", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date")
                        .HasColumnOrder(103);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description")
                        .HasColumnOrder(102);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(105);

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasColumnOrder(100);

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasColumnOrder(101);

                    b.HasKey("CategoryId");

                    b.ToTable("TheLoai");
                });

            modelBuilder.Entity("Data.SqlServer.Data.Tin", b =>
                {
                    b.Property<int>("QuangCaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("news_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuangCaoId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date")
                        .HasColumnOrder(103);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description")
                        .HasColumnOrder(102);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date")
                        .HasColumnOrder(105);

                    b.Property<string>("NewsContent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("news_content");

                    b.Property<string>("NewsImageUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("news_image");

                    b.Property<string>("NewsKeyWord")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("news_keyword");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("news_title");

                    b.Property<string>("NewsTomTat")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("news_tomtat");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasColumnOrder(100);

                    b.Property<int>("SoLanXem")
                        .HasColumnType("int")
                        .HasColumnName("news_soluot_xem");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status")
                        .HasColumnOrder(101);

                    b.Property<bool>("TinNoiBat")
                        .HasColumnType("bit")
                        .HasColumnName("bool_tinnoibat");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("QuangCaoId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.SqlServer.Data.LoaiTin", b =>
                {
                    b.HasOne("Data.SqlServer.Data.TheLoai", "TheLoai")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheLoai");
                });

            modelBuilder.Entity("Data.SqlServer.Data.QuangCao", b =>
                {
                    b.HasOne("Data.SqlServer.Data.LoaiTin", "LoaiTin")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.SqlServer.Data.CacViTri", "CacViTri")
                        .WithMany()
                        .HasForeignKey("ViTriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CacViTri");

                    b.Navigation("LoaiTin");
                });

            modelBuilder.Entity("Data.SqlServer.Data.Tin", b =>
                {
                    b.HasOne("Data.SqlServer.Data.LoaiTin", "LoaiTin")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoaiTin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.SqlServer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.SqlServer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.SqlServer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.SqlServer.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
